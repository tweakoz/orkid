///////////////////////////////////////////////////////////////
// FxConfigs
///////////////////////////////////////////////////////////////
fxconfig fxcfg_default {
  import "mathtools.i";
  import "misctools.i";
  import "envtools.i";
  import "pbrtools.i";
///////////////////////////////////////////////////////////////
}
// Interfaces
///////////////////////////////////////////////////////////////
uniform_set ub_deferred_vtx {
  mat4 MVPC;
  mat4 MVPL;
  mat4 MVPR;
}
///////////////////////////////////////////////////////////////
vertex_interface iface_v2uv : ub_deferred_vtx {
  inputs {
    vec4 position : POSITION;
    vec2 uv0 : TEXCOORD0;
    vec2 uv1 : TEXCOORD1;
  }
  outputs {
    vec2 frg_uva;
    vec2 frg_uvb;
  }
}
///////////////////////////////////////////////////////////////
uniform_set ub_deferred_frg {
  mat4 IVPArray[2];
  mat4 VArray[2];
  mat4 PArray[2];
  usampler2D MapGBuffer;
  sampler2D MapDepthCluster;
  sampler2D MapLinearDepth;
  sampler2D MapDepth;
  sampler2D MapSpecularEnv;
  sampler2D MapDiffuseEnv;
  sampler2D MapBrdfIntegration;
  sampler2D MapLightingCookie;
  sampler2D MapShadowDepth;
  sampler3D MapVolTexA;
  vec3 EyePostion;
  vec2 InvViewportSize; // inverse target size
  float Time;
  vec2 NearFar;
  int NumLights;
  int TileDim;
  float SkyboxLevel;
  float SpecularLevel;
  float DiffuseLevel;
  vec3 AmbientLevel;
  float SpecularMipBias;
  float EnvironmentMipBias;
  float EnvironmentMipScale;
  float DepthFogDistance;
  float DepthFogPower;
  vec4 ShadowParams;

  int SSAONumSamples;
  int SSAONumSteps;
  float SSAOBias;
  float SSAORadius;
  float SSAOWeight;
  float SSAOPower;
  sampler2D SSAOKernel;
  sampler2D SSAOScrNoise;
  vec2 Zndc2eye;
  mat4 MatP;
  mat4 MatInvP;
}
///////////////////////////////////////////////////////////////
uniform_block ub_light {
  vec4 LightColorD[256];
  mat4 LightMatrix[256];
  mat4 ShadowMatrix[256];
  float LightRadius[256];
}
///////////////////////////////////////////////////////////////
fragment_interface iface_f2uv {
  inputs {
    vec2 frg_uva;
    vec2 frg_uvb;
  }
  outputs { vec4 out_clr; }
}
///////////////////////////////////////////////////////////////
libblock lib_deferred
  : ub_light
  : ub_deferred_frg
  : lib_math
  : lib_envmapping
  : lib_cellnoise
  : lib_brdf
  : lib_gbuf_decode
  : lib_def
  : lib_mmnoise
  : lib_ssao
  : lib_pbr {
  /////////////////////////////////////////////////////////
  vec3 gammaCorrect(vec3 inp){
    return inp;
    //return pow(inp, vec3(1.0/1.6));
  }
  /////////////////////////////////////////////////////////
  vec3 baselighting(WPosData wpd) {
    GBufData gbd = decodeGBUF(wpd);
    // sunlight ///////////////
    vec3 l = vec3((0.5 + dot(gbd._wnrm, vec3(0, 1, 0)) * 0.5)) * 0.25;
    ///////////////////////////
    return gbd._albedo * l;
  }
  /////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////
  LightCtx lcalc1(WPosData wpd,GBufData gbd){
    LightCtx plc;
    const vec3 metalbase = vec3(0.04);
    float metallic = clamp(pow(gbd._metallic,0.65),0.02,0.99);
    float roughnessL = pow(gbd._roughness,0.65);
    float roughness = clamp(roughnessL,0.01,1.0);
    vec3 basecolor = gbd._albedo;
    vec3 diffcolor = mix(basecolor,vec3(0),metallic);
    /////////////////////////
    vec3 wpos = gbd._wpos;
    vec3 epos = posatdepth(wpd,0.0);
    /////////////////////////
    plc._viewdir = normalize(wpos-epos);
    plc._metallic = metallic;
    plc._roughness = roughness;
    plc._normal = gbd._wnrm;
    plc._F0 = mix(metalbase,basecolor,metallic);
    return plc;
  }
  /////////////////////////////////////////////////////////
  vec3 plcalc2(LightCtx plc,GBufData gbd){

      vec3 eye_dir = - plc._viewdir;

      float dist2lightsq = plc._lightdel.x*plc._lightdel.x
                         + plc._lightdel.y*plc._lightdel.y
                         + plc._lightdel.z*plc._lightdel.z;
      float atten = 1.0 / max(.05,dist2lightsq);
      vec3 lightdir = normalize(plc._lightdel);
      vec3 halfdir = normalize(eye_dir + lightdir);
      vec3 F = fresnelSchlickRoughness(satdot(halfdir,eye_dir), plc._F0,plc._roughness);
      vec3 diffusel = vec3(1) - F;
      diffusel *= (1 - plc._metallic);
      vec3 diffuse_term = (diffusel*gbd._albedo*INV_PI)*DiffuseLevel;

      //////////////////////////
      // filtered specular (WIP)
      //////////////////////////

      vec3 N = gbd._wnrm; //_samples[4];
      float ggx = computeGGX(N, halfdir, plc._roughness);
      float geo = geometrySmith(N, eye_dir, lightdir, plc._roughness);
      float denominator = 4 * satdot(N,eye_dir) * satdot(N, lightdir) + EPSILON;
      vec3 numerator  = min(ggx * geo * SpecularLevel, 16)*F;
      vec3 specular_term = (numerator / max(.0625, denominator)) * gbd._specscale[4];
      float ndotl = satdot(N,lightdir);

    //////////////////////////
    return (diffuse_term + specular_term) * atten * ndotl;
  }
  /////////////////////////////////////////////////////////
  vec3 plcalc2_aa(LightCtx plc,GBufData gbd){
    float HighSpecularClamp = 0.9;
    float GrazingAngleStart = 0.6;
    float GrazingAngleEnd = 1.0;
    vec3 eye_dir = -plc._viewdir;
    float dist2lightsq = dot(plc._lightdel, plc._lightdel);
    float atten = 1.0 / max(0.05, dist2lightsq);
    vec3 lightdir = normalize(plc._lightdel);
    vec3 halfdir = normalize(eye_dir + lightdir);
    vec3 F = fresnelSchlickRoughness(smoothstep(0.0, 1.0, satdot(halfdir, eye_dir)), plc._F0, plc._roughness);
    vec3 diffusel = vec3(1.0) - F;
    diffusel *= (1.0 - plc._metallic);
    vec3 diffuse_term = diffusel * gbd._albedo * INV_PI * DiffuseLevel;
    vec3 N = gbd._wnrm;
    float ggx = computeGGX(N, halfdir, plc._roughness);
    float geo = geometrySmith(N, eye_dir, lightdir, plc._roughness);
    float denominator = 4.0 * satdot(N, eye_dir) * satdot(N, lightdir) + EPSILON;
    vec3 numerator = min(ggx * geo * SpecularLevel, 16.0) * F;
    vec3 specular_term = (numerator / max(0.0625, denominator)) * gbd._specscale[4];
    specular_term = clamp(specular_term, 0.0, HighSpecularClamp);
    float viewDotNormal = abs(dot(N, eye_dir));
    float grazingAdjustment = smoothstep(GrazingAngleStart, GrazingAngleEnd, viewDotNormal);
    specular_term *= grazingAdjustment;
    float ndotl = satdot(N, lightdir);
    return (diffuse_term + specular_term) * atten * ndotl;
  }
  /////////////////////////////////////////////////////////
  vec3 pntlighting_clustered(WPosData wpd,GBufData gbd) {
    int lbas     = int(frg_uvb.x);
    int numl     = int(frg_uvb.y);
    vec3 l       = vec3(0, 0, 0);
    if( gbd._mode==1 ){
      LightCtx plc = lcalc1(wpd,gbd);
      for (int i = 0; i < numl; i++) {
        int lidx                     = lbas + i;
        float lightcamdepth          = LightColorD[lidx].w;
        bool sphere_intersects_depth = (gbd._zeye - lightcamdepth) < LightRadius[lidx];
        if (sphere_intersects_depth){
          vec3 lightpos = LightMatrix[lidx][3].xyz;
          vec3 lightdel = lightpos - gbd._wpos;
          plc._lightdel = lightdel;
          vec3 lightn = normalize(lightdel)*mat3(LightMatrix[lidx]);
          vec3 lighttex = env_equirectangularFlipV(lightn,MapLightingCookie,0);
          vec3 lightcol = LightColorD[lidx].xyz;
          l += plcalc2(plc,gbd)*lighttex*lightcol;
        }
      }
    }
    return l;
  }
  /////////////////////////////////////////////////////////
  vec3 pntlighting_textured_simple(WPosData wpd,GBufData gbd) {
    vec3 l       = vec3(0, 0, 0);
    if( gbd._mode==1 ){
      LightCtx plc = lcalc1(wpd,gbd);
      int lbeg = int(frg_uvb.x);
      int lend = lbeg+int(frg_uvb.y);
      for (int lidx = lbeg; lidx<lend; lidx++) {
        vec3 lightpos = LightMatrix[lidx][3].xyz;
        plc._lightdel = lightpos - gbd._wpos;
        vec3 lightn = normalize(plc._lightdel)*mat3(LightMatrix[lidx]);
        vec3 lighttex = env_equirectangularFlipV(lightn,MapLightingCookie,0);
        vec3 lightcol = LightColorD[lidx].xyz;
        l += plcalc2(plc,gbd)*lighttex*lightcol;
      }
    }
    float depth_fogval = 1.0-clamp(pow(gbd._fogZ*DepthFogDistance,DepthFogPower),0,1);
    return l*depth_fogval;
  }
  /////////////////////////////////////////////////////////
  vec3 TEST(WPosData wpd,GBufData gbd){
    LightCtx plc = lcalc1(wpd,gbd);
    return vec3(mod(gbd._linZ*0.1,1));
  }
  /////////////////////////////////////////////////////////
  vec3 pntlighting_untextured_simple(WPosData wpd,GBufData gbd) {
    if( gbd._mode!=1 ){
      return vec3(0,0,0);
    }
    vec3 l = vec3(0.0, 0.0, 0.0);
    LightCtx plc = lcalc1(wpd,gbd);
    int lbeg = int(frg_uvb.x);
    int lend = lbeg + int(frg_uvb.y);
    for (int lidx = lbeg; lidx<lend; lidx++) {
      vec3 lightpos = LightMatrix[lidx][3].xyz;
      plc._lightdel = lightpos - gbd._wpos;
      vec3 lightcol = LightColorD[lidx].xyz;
      l += plcalc2_aa(plc,gbd)*lightcol;
    }
    float depth_fogval = 1.0-clamp(pow(gbd._fogZ*DepthFogDistance,DepthFogPower),0,1);
    return l * depth_fogval;
  }
  /////////////////////////////////////////////////////////
  struct SpotLightCalc2{
    vec3 _lightoutput;
    vec2 _lightuv;
    bool _mask;
    float _lightz;
    vec3 _lightdel;
  };
  SpotLightCalc2 slcalc(GBufData gbd,int lidx){
    SpotLightCalc2 slc;
    mat4 lmtx = LightMatrix[lidx];
    mat4 shmtx = ShadowMatrix[lidx];
    vec3 lightpos = (lmtx)[3].xyz;
    slc._lightdel = lightpos-gbd._wpos;
    float lightrange = LightRadius[lidx];
    vec4 light_hpos = (shmtx)*vec4(gbd._wpos,1);
    vec3 light_ndc = (light_hpos.xyz / light_hpos.w);
    slc._lightz = light_ndc.z;
    slc._lightuv = light_ndc.xy*0.5+vec2(0.5);
    slc._mask = bool(light_ndc.x>=-1 && light_ndc.x<1) &&
                 bool(light_ndc.y>=-1 && light_ndc.y<1) &&
                 bool(light_hpos.z>=0.0 && light_hpos.z<=lightrange) ;
    vec3 lightcol = LightColorD[lidx].xyz;
    vec3 lighttex = texture(MapLightingCookie,slc._lightuv).xyz;

    slc._lightoutput = lightcol*lighttex*float(slc._mask);

    return slc;
  }
  /////////////////////////////////////////////////////////
  // toz
  /////////////////////////////////////////////////////////
  vec3 spotlighting_textured_simple(WPosData wpd,GBufData gbd) {
    vec3 l       = vec3(0, 0, 0);
    if( gbd._mode==1 ){
      LightCtx plc = lcalc1(wpd,gbd);
      int lbeg = int(frg_uvb.x);
      int lend = lbeg+int(frg_uvb.y);
      for (int lidx = lbeg; lidx<lend; lidx++) {
        SpotLightCalc2 slc = slcalc(gbd,lidx);
        plc._lightdel = slc._lightdel;
        vec3 PL = plcalc2(plc,gbd);//*slc._lightoutput;
        vec3 LN = normalize(slc._lightdel);
        float NdotL = max(0.0,dot(plc._normal,LN));
        float Ldist = length(slc._lightdel);
        l += slc._lightoutput*NdotL/pow(Ldist,2);
      }
    }
    float depth_fogval = 1.0-clamp(pow(gbd._fogZ*DepthFogDistance,DepthFogPower),0,1);
    return l*depth_fogval;
  }
  /////////////////////////////////////////////////////////
  // non-pcf shadows
  /////////////////////////////////////////////////////////
  vec3 spotlighting_textured_shadowed(WPosData wpd,GBufData gbd) {
    vec3 l       = vec3(0, 0, 0);
    if( gbd._mode==1 ){
      LightCtx plc = lcalc1(wpd,gbd);
      int lbeg = int(frg_uvb.x);
      int lend = lbeg+int(frg_uvb.y);
      for (int lidx = lbeg; lidx<lend; lidx++) {
        SpotLightCalc2 slc = slcalc(gbd,lidx);
        plc._lightdel = slc._lightdel;
        /////////////////////////////////////////
        // simple box filtered shadow
        /////////////////////////////////////////
        float shadow = 0.0;
        for( int ys=-1; ys<2; ys++ ){
          for( int xs=-1; xs<2; xs++ ){
            vec2 uvd = vec2(xs,ys)*ShadowParams.x;
            vec2 uvx = slc._lightuv+uvd;
            float shadow_depth = textureLod(MapShadowDepth,uvx,0).r+ShadowParams.z;
            float shadow_sample = float(shadow_depth>=slc._lightz);
            shadow += mix(1,shadow_sample,float(slc._mask));
          }
        }
        shadow *= ShadowParams.y;
        /////////////////////////////////////////
        l += plcalc2(plc,gbd)*slc._lightoutput*shadow;
      }
    }
    float depth_fogval = 1.0-clamp(pow(gbd._fogZ*DepthFogDistance,DepthFogPower),0,1);
    return l*depth_fogval;
  }
  /////////////////////////////////////////////////////////
  vec4 spotdecaling_textured_simple(WPosData wpd,GBufData gbd) {
    vec4 l       = vec4(0, 0, 0,0);
    if( gbd._mode==1 ){
      int lbeg = int(frg_uvb.x);
      int lend = lbeg+int(frg_uvb.y);
      for (int lidx = lbeg; lidx<lend; lidx++) {
        float lightrange = LightRadius[lidx];
        vec4 light_hpos = ShadowMatrix[lidx]*vec4(gbd._wpos,1);
        vec3 light_ndc = (light_hpos.xyz / light_hpos.w);
        vec2 light_uv = light_ndc.xy*0.5+vec2(0.5);
        float mask = float(light_ndc.x>=-1 && light_ndc.x<1) *
                     float(light_ndc.y>=-1 && light_ndc.y<1) *
                     float(light_hpos.z>=0.0 && light_hpos.z<=lightrange) ;
        vec3 lightcol = LightColorD[lidx].xyz;
        vec3 lighttex = texture(MapLightingCookie,light_uv).xyz;
        vec3 lightoutput = lightcol*lighttex;
        l += vec4(lightoutput,mask);
      }
    }
    return l;
  }
  /////////////////////////////////////////////////////////
  vec3 spotlighting_untextured_simple(WPosData wpd,GBufData gbd) {
    vec3 l       = vec3(0, 0, 0);
    if( gbd._mode==1 ){
      LightCtx plc = lcalc1(wpd,gbd);
      int lbeg = int(frg_uvb.x);
      int lend = lbeg+int(frg_uvb.y);
      for (int lidx = lbeg; lidx<lend; lidx++) {
        vec3 lightpos = inverse(LightMatrix[lidx])[3].xyz;
        plc._lightdel = lightpos - gbd._wpos;
        vec3 lightcol = LightColorD[lidx].xyz;
        l += plcalc2(plc,gbd)*lightcol;
      }
    }
    float depth_fogval = 1.0-clamp(pow(gbd._fogZ*DepthFogDistance,DepthFogPower),0,1);
    return l*depth_fogval;
  }
  /////////////////////////////////////////////////////////
  vec3 pbrEnvironmentLighting(WPosData wpd){

    GBufData gbd = decodeGBUF(wpd);

    vec2 uv   = wpd._muv;
    vec3 view_epos0 = posatdepth(wpd,0.0);
    vec3 view_epos1 = posatdepth(wpd,1.0);
    vec3 VIEW_N = normalize(view_epos1-view_epos0);
    vec3 skybox_n = vec3(-VIEW_N.x,-VIEW_N.y,-VIEW_N.z);
    vec3 skyboxColor = env_equirectangularFlipV(skybox_n,MapSpecularEnv,EnvironmentMipBias)*SkyboxLevel;

    vec3 out_color;

    if( gbd._mode==1 ){
      /////////////////////////
      // ambient occlusion
      /////////////////////////
      float ambocc = 1.0;
      if(SSAONumSamples>=8){
        //ambocc = pow(ssao_nonlinear(uv),SSAOPower);
        ambocc = mix(1.0,ambocc,SSAOWeight);
      }
      /////////////////////////
      PbrInpA pbd;
      pbd._emissive  = length(gbd._wnrm) < 0.1;
      pbd._metallic  = gbd._metallic;
      pbd._roughness = gbd._roughness;
      pbd._albedo    = gbd._albedo;
      pbd._epos      = posatdepth(wpd,1.0);
      pbd._wpos      = gbd._wpos;
      pbd._wnrm      = gbd._wnrm;
      pbd._fogZ      = 0.0;
      pbd._atmos     = 0.0;
      pbd._alpha     = 1.0;
      pbd._ambocc    = ambocc;
      /////////////////////////
      PbrOutA OA = pbrIoEnvA(pbd);
      /////////////////////////
      vec3 ambient = OA._ambient;
      vec3 diffuse = OA._diffuseOut;
      /////////////////////////
      float spec_ruf = pow(gbd._roughness,1.3)*0.7;
      float spec_miplevel = SpecularMipBias + (spec_ruf * EnvironmentMipScale);
      /////////////////////////
      vec3 spec_env = env_equirectangularFlipV(OA._refl,MapSpecularEnv,spec_miplevel);
      vec3 specular_light = spec_env*SkyboxLevel;
      vec3 specularC = specular_light*OA._F0*SpecularLevel;
      vec3 specularMask   = clamp(OA._F * OA._BRDF.x + OA._BRDF.y, 0, 1);
      vec3 specular = specularMask*specularC*ambocc;
      /////////////////////////
      // final outputs
      /////////////////////////
      vec3 finallitcolor = saturateV(diffuse+specular);
      float depth_fogval = saturateF(pow(gbd._fogZ*DepthFogDistance,DepthFogPower));
      vec3 skyboxColor = env_equirectangularFlipV(skybox_n,MapSpecularEnv,0)*SkyboxLevel;
      out_color = mix(finallitcolor,skyboxColor,depth_fogval);
      out_color += ambient + gbd._emissive;
    }
    else {
      out_color = skyboxColor;
    }
    //float atmos = 0.0; //gbd._atmos;
    //float alpha = 0.0; //clamp(gbd._alpha,0,1);
    return out_color;
    //return mix(out_color,vec3(atmos),clamp(alpha,0,1));

  } // vec3 environmentLighting(){


///////////////////////////////////////////////////////////////
} // libblock lib_deferred : ub_light : ub_deferred_frg {
///////////////////////////////////////////////////////////////
vertex_shader vs_passthru2uv : iface_v2uv {
  frg_uva     = uv0;
  frg_uvb     = uv1;
  gl_Position = position;
}
///////////////////////////////////////////////////////////////
fragment_interface iface_fdownsampledepthcluster {
  inputs {
    vec2 frg_uva;
    vec2 frg_uvb;
  }
  outputs { uint out_depthclusters; }
}
fragment_shader ps_downsampledepthcluster : iface_fdownsampledepthcluster : lib_deferred {
  vec2 base       = (gl_FragCoord.xy - vec2(0.5, 0.5)) * float(TileDim);
  uint clusterset = 0;
  for (int iy = 0; iy < TileDim; iy++) {
    for (int ix = 0; ix < TileDim; ix++) {
      vec2 uv              = base + vec2(ix, iy);
      uv                   = uv * InvViewportSize;
      float depthtex       = texture(MapDepth, uv).x;
      float ndc            = depthtex * 2.0 - 1.0;
      float zeye           = Zndc2eye.x / (ndc - Zndc2eye.y);
      uint clusterbitindex = uint(log2(zeye));
      clusterset           = clusterset | (1u << clusterbitindex);
    }
  }
  out_depthclusters = clusterset;
}
///////////////////////////////////////////////////////////////
fragment_shader ps_baselight : iface_f2uv : lib_deferred {
  WPosData wpd = monoWPD();
 vec3 c = baselighting(wpd);
  out_clr    = vec4(0,0,0,0);//vec4(c*1.0/25.0, 1);
}
///////////////////////////////////////////////////////////////
fragment_shader ps_baselight_stereo : iface_f2uv : lib_deferred {
  WPosData wpd = stereoWPD();
  vec3 c       = baselighting(wpd);
  out_clr      = vec4(0,0,0,0);//vec4(c, 1);
}
///////////////////////////////////////////////////////////////
fragment_shader ps_pointlight_textured : iface_f2uv : lib_deferred {
  WPosData wpd = monoWPD();
  GBufData gbd = decodeGBUF(wpd);
  out_clr = vec4(pntlighting_textured_simple(wpd,gbd), 1);
  /////////////////////////////////////////
  // show lighting tiles
  /////////////////////////////////////////
  //float dp5  = distance(frg_uva, vec2(.5, .5));
  //c += vec3(pow(dp5, 17) * 256.0);
  /////////////////////////////////////////
}
///////////////////////////////////////////////////////////////
fragment_shader ps_pointlight_untextured : iface_f2uv : lib_deferred {
  WPosData wpd = monoWPD();
  GBufData gbd = decodeGBUF(wpd);
  vec3 lcolor = pntlighting_untextured_simple(wpd,gbd);
  out_clr = vec4(lcolor,0);
}
///////////////////////////////////////////////////////////////
fragment_shader ps_pointlight_textured_stereo : iface_f2uv : lib_deferred {
  WPosData wpd = stereoWPD();
  GBufData gbd = decodeGBUF(wpd);
  out_clr = vec4(pntlighting_textured_simple(wpd,gbd), 1);
}
///////////////////////////////////////////////////////////////
fragment_shader ps_pointlight_untextured_stereo : iface_f2uv : lib_deferred {
  WPosData wpd = stereoWPD();
  GBufData gbd = decodeGBUF(wpd);
  out_clr = vec4(pntlighting_untextured_simple(wpd,gbd), 1);
}
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
fragment_shader ps_spotlight_untextured : iface_f2uv : lib_deferred {
  WPosData wpd = monoWPD();
  GBufData gbd = decodeGBUF(wpd);
  out_clr = vec4(spotlighting_untextured_simple(wpd,gbd), 1);
  /////////////////////////////////////////
  // show lighting tiles
  /////////////////////////////////////////
  //float dp5  = distance(frg_uva, vec2(.5, .5));
  //c += vec3(pow(dp5, 17) * 256.0);
  /////////////////////////////////////////
}
///////////////////////////////////////////////////////////////
fragment_shader ps_spotlight_untextured_stereo : iface_f2uv : lib_deferred {
  WPosData wpd = stereoWPD();
  GBufData gbd = decodeGBUF(wpd);
  out_clr = vec4(spotlighting_untextured_simple(wpd,gbd), 1);
}
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
fragment_shader ps_spotlight_textured : iface_f2uv : lib_deferred {
  WPosData wpd = monoWPD();
  GBufData gbd = decodeGBUF(wpd);
  out_clr = vec4(spotlighting_textured_simple(wpd,gbd), 1);
}
///////////////////////////////////////////////////////////////
fragment_shader ps_spotlight_textured_stereo : iface_f2uv : lib_deferred {
  WPosData wpd = stereoWPD();
  GBufData gbd = decodeGBUF(wpd);
  out_clr = vec4(spotlighting_textured_simple(wpd,gbd), 1);
}
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
fragment_shader ps_spotlight_textured_shadowed : iface_f2uv : lib_deferred {
  WPosData wpd = monoWPD();
  GBufData gbd = decodeGBUF(wpd);
  out_clr = vec4(spotlighting_textured_shadowed(wpd,gbd), 1);
}
///////////////////////////////////////////////////////////////
fragment_shader ps_spotlight_textured_shadowed_stereo : iface_f2uv : lib_deferred {
  WPosData wpd = stereoWPD();
  GBufData gbd = decodeGBUF(wpd);
  out_clr = vec4(spotlighting_textured_simple(wpd,gbd), 1);
}
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
fragment_shader ps_spotdecal_textured : iface_f2uv : lib_deferred {
  WPosData wpd = monoWPD();
  GBufData gbd = decodeGBUF(wpd);
  vec4 oc = spotdecaling_textured_simple(wpd,gbd);
  out_clr = vec4(oc.xyz,1);
  if( oc.w < 0.5)
    discard;
}
///////////////////////////////////////////////////////////////
fragment_shader ps_spotdecal_textured_stereo : iface_f2uv : lib_deferred {
  WPosData wpd = stereoWPD();
  GBufData gbd = decodeGBUF(wpd);
  out_clr = vec4(1,1,0,1);
}
///////////////////////////////////////////////////////////////
fragment_shader ps_environment : iface_f2uv : lib_deferred  {
  WPosData wpd = monoWPD();
  vec3 el = pbrEnvironmentLighting(wpd);
  out_clr = vec4(el,1);
}
///////////////////////////////////////////////////////////////
fragment_shader ps_environment_stereo : iface_f2uv : lib_deferred  {
  WPosData wpd = stereoWPD();
  vec3 c = pbrEnvironmentLighting(wpd);
  out_clr = vec4(c,1);
}
///////////////////////////////////////////////////////////////
// StateBlocks
///////////////////////////////////////////////////////////////
state_block sb_deferred_default : default {}
///////////////////////////////////////////////////////////////
technique baselight {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_passthru2uv;
    fragment_shader = ps_baselight;
    state_block     = sb_deferred_default;
  }
}
///////////////////////////////////////////////////////////////
technique baselight_stereo {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_passthru2uv;
    fragment_shader = ps_baselight_stereo;
    state_block     = sb_deferred_default;
  }
}
///////////////////////////////////////////////////////////////
technique pointlight_textured {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_passthru2uv;
    fragment_shader = ps_pointlight_textured;
    state_block     = sb_deferred_default;
  }
}
///////////////////////////////////////////////////////////////
technique pointlight_untextured {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_passthru2uv;
    fragment_shader = ps_pointlight_untextured;
    state_block     = sb_deferred_default;
  }
}
///////////////////////////////////////////////////////////////
technique pointlight_textured_stereo {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_passthru2uv;
    fragment_shader = ps_pointlight_textured_stereo;
    state_block     = sb_deferred_default;
  }
}
///////////////////////////////////////////////////////////////
technique pointlight_untextured_stereo {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_passthru2uv;
    fragment_shader = ps_pointlight_untextured_stereo;
    state_block     = sb_deferred_default;
  }
}
///////////////////////////////////////////////////////////////
technique spotlight_untextured {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_passthru2uv;
    fragment_shader = ps_spotlight_untextured;
    state_block     = sb_deferred_default;
  }
}
///////////////////////////////////////////////////////////////
technique spotlight_untextured_stereo {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_passthru2uv;
    fragment_shader = ps_spotlight_untextured_stereo;
    state_block     = sb_deferred_default;
  }
}
///////////////////////////////////////////////////////////////
technique spotlight_textured {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_passthru2uv;
    fragment_shader = ps_spotlight_textured;
    state_block     = sb_deferred_default;
  }
}
///////////////////////////////////////////////////////////////
technique spotlight_textured_stereo {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_passthru2uv;
    fragment_shader = ps_spotlight_textured_stereo;
    state_block     = sb_deferred_default;
  }
}
///////////////////////////////////////////////////////////////
technique spotlight_textured_shadowed {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_passthru2uv;
    fragment_shader = ps_spotlight_textured_shadowed;
    state_block     = sb_deferred_default;
  }
}
///////////////////////////////////////////////////////////////
technique spotlight_textured_shadowed_stereo {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_passthru2uv;
    fragment_shader = ps_spotlight_textured_shadowed_stereo;
    state_block     = sb_deferred_default;
  }
}
///////////////////////////////////////////////////////////////
technique spotdecal_textured {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_passthru2uv;
    fragment_shader = ps_spotdecal_textured;
    state_block     = sb_deferred_default;
  }
}
///////////////////////////////////////////////////////////////
technique spotdecal_textured_stereo {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_passthru2uv;
    fragment_shader = ps_spotdecal_textured_stereo;
    state_block     = sb_deferred_default;
  }
}
///////////////////////////////////////////////////////////////
technique downsampledepthcluster {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_passthru2uv;
    fragment_shader = ps_downsampledepthcluster;
    state_block     = sb_deferred_default;
  }
}
///////////////////////////////////////////////////////////////
technique environmentlighting {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_passthru2uv;
    fragment_shader = ps_environment;
    state_block     = sb_deferred_default;
  }
}
///////////////////////////////////////////////////////////////
technique environmentlighting_stereo {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_passthru2uv;
    fragment_shader = ps_environment_stereo;
    state_block     = sb_deferred_default;
  }
}
