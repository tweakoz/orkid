///////////////////////////////////////////////////////////////
// FxConfigs
///////////////////////////////////////////////////////////////
fxconfig fxcfg_default {
  glsl_version = "150";
  import "skintools.i";
}
///////////////////////////////////////////////////////////////
// Interfaces
///////////////////////////////////////////////////////////////

uniform_set ub_vtx {
  mat4 mvp;
  mat4 m;

  vec4 modcolor;
  float time;

  vec3 AmbientLight;
  int NumDirectionalLights;
  vec3 DirectionalLightDir[4];
  vec3 DirectionalLightColor[4];
  vec3 EmissiveColor;

  vec3 WCamLoc;
  float SpecularPower;
}
vertex_interface iface_rigid : ub_vtx {
  inputs {
    vec4 position : POSITION;
    vec3 normal : NORMAL;
    vec4 vtxcolor : COLOR0;
    vec2 uv0 : TEXCOORD0;
  }
  outputs {
    vec4 frg_clr;
    vec2 frg_uv0;
    vec4 frg_nrmd;
    vec3 frg_pos;
  }
}

vertex_interface iface_vwire : ub_vtx {
  inputs {
    vec4 position : POSITION;
    vec3 normal : NORMAL;
    vec4 vtxcolor : COLOR0;
    vec2 uv0 : TEXCOORD0;
    vec3 bary : BINORMAL;
  }
  outputs {
    vec4 frg_clr;
    vec2 frg_uv0;
    vec4 frg_nrmd;
    vec3 frg_pos;
    vec3 frg_bary;
  }
}

vertex_interface iface_skinned : iface_skintools // inherit skinned unis/attrs
    : ub_vtx {
  inputs {
    vec4 position : POSITION;
    vec3 normal : NORMAL;
    vec2 uv0 : TEXCOORD0;
  }
  outputs {
    vec4 frg_clr;
    vec4 frg_nrmd;
    vec2 frg_uv0;
  }

}

///////////////////////////////////////////////////////////////
fragment_interface iface_fdefault {
  inputs {
    vec4 frg_clr;
    vec2 frg_uv0;
    vec4 frg_nrmd;
    vec3 frg_pos;
  }
  outputs {
    layout(location = 0) vec4 out_clr;
  }

}

fragment_interface iface_fwire {
  inputs {
    vec4 frg_clr;
    vec2 frg_uv0;
    vec4 frg_nrmd;
    vec3 frg_pos;
    vec3 frg_bary;
  }
  outputs {
    layout(location = 0) vec4 out_clr;
  }
}

///////////////////////////////////////////////////////////////

uniform_set ub_frg {
  vec4 modcolor;
  sampler2D DiffuseMap;
}

fragment_interface iface_fmt : ub_frg {
  inputs {
    vec4 frg_clr;
    vec2 frg_uv0;
  }
  outputs {
    layout(location = 0) vec4 out_clr;
  }

}

///////////////////////////////////////////////////////////////
fragment_interface iface_fpick : ub_frg {
  inputs {
    vec4 frg_clr;
    vec2 frg_uv0;
    vec4 frg_nrmd;
  }
  outputs {
    layout(location = 0) vec4 out_clr;
    layout(location = 1) vec4 out_nrmd;
  }

}

///////////////////////////////////////////////////////////////
// StateBlocks
///////////////////////////////////////////////////////////////
state_block sb_default : default {
  // BlendMode = ADDITIVE;https://plugins.jetbrains.com/plugin/7275-codeglance/
  DepthTest = LESS;
  DepthMask = true;
  CullTest  = PASS_FRONT;
}
///////////////////////////////////////////////////////////////
state_block sb_lerpblend : sb_default { BlendMode = ALPHA; }
///////////////////////////////////////////////////////////////
state_block sb_additive : sb_default { BlendMode = ADDITIVE; }
///////////////////////////////////////////////////////////////
// shaders
///////////////////////////////////////////////////////////////
vertex_shader vs_vtxtexcolor : iface_rigid {
  gl_Position = WVPMatrix * position;
  frg_clr     = vec4(1.0f, 1.0f, 1.0f, 1.0f); // vtxcolor.bgra;
  frg_uv0     = uv0;
  // frg_uv1 = uv1;
}

///////////////////////////////////////////////////////////////
vertex_shader vs_wnormal : iface_rigid {
  vec4 hpos  = mvp * position;
  vec3 wnorm = normalize((m * vec4(normal,0)).xyz);
  ///////////////////////////
  frg_clr     = vec4(vec3(.5)+wnorm*0.5, 1.0);
  frg_pos     = (m * position).xyz;
  frg_uv0     = uv0;
  frg_nrmd    = vec4(wnorm, -hpos.z/hpos.w);
  gl_Position = hpos;
  ///////////////////////////
}

///////////////////////////////////////////////////////////////
vertex_shader vs_wnormal_wire : iface_vwire {
  vec4 hpos  = mvp * position;
  vec3 wnorm = normalize((m * vec4(normal,0)).xyz);
  ///////////////////////////
  frg_clr     = vec4(vec3(.5)+wnorm*0.5, 1.0);
  frg_pos     = (m * position).xyz;
  frg_uv0     = uv0;
  frg_nrmd    = vec4(wnorm, -hpos.z/hpos.w);
  frg_bary    = bary;
  gl_Position = hpos;
  ///////////////////////////
}

///////////////////////////////////////////////////////////////
vertex_shader vs_vtx_color : iface_vwire {
  vec4 hpos  = mvp * position;
  vec3 wnorm = normalize((m * vec4(normal,0)).xyz);
  ///////////////////////////
  frg_clr     = vtxcolor;
  frg_pos     = (m * position).xyz;
  frg_uv0     = uv0;
  frg_nrmd    = vec4(wnorm, -hpos.z/hpos.w);
  frg_bary    = bary;
  gl_Position = hpos;
  ///////////////////////////
}

///////////////////////////////////////////////////////////////
vertex_interface iface_rigid_stereo : iface_rigid {
  outputs {
    layout(secondary_view_offset=1) int gl_Layer;
  }
}
vertex_shader vs_wnormal_stereo
  : extension(GL_NV_stereo_view_rendering)
  : extension(GL_NV_viewport_array2)
  : iface_rigid_stereo {
  vec4 cpos  = WVMatrix * position;
  vec3 wnorm = normalize(WRotMatrix * normal);
  ///////////////////////////
  frg_clr     = vec4(wnorm.xyz, 1.0);
  frg_uv0     = uv0;
  frg_nrmd    = vec4(wnorm, -cpos.z);
  ///////////////////////////
  gl_Position            = WVPMatrixL * position;
  gl_SecondaryPositionNV = WVPMatrixR * position;
  gl_Layer = 0;
  gl_ViewportMask[0] = 1;
  gl_SecondaryViewportMaskNV[0] = 2;
  ///////////////////////////
}

///////////////////////////////////////////////////////////////
vertex_shader vs_wnormalsk : iface_skinned : skin_tools {
  vec3 obj_pos = position.xyz;
  vec3 skn_pos = SkinPosition(boneindices, boneweights, position.xyz);
  gl_Position  = WVPMatrix * vec4(skn_pos, 1.0);
  vec3 sknorm  = SkinNormal(boneindices, boneweights, normal.xyz);
  vec3 wnorm   = normalize(WRotMatrix * sknorm);
  frg_clr      = vec4(wnorm.xyz, 1.0);
  frg_uv0      = uv0;
}
///////////////////////////////////////////////////////////////
vertex_shader vs_sk : iface_skinned : skin_tools {
  SkinOut sout = LitSkinned(boneindices, boneweights, position.xyz);
  frg_clr   = vec4(sout.skn_col, 1);
  frg_uv0   = uv0;
  gl_Position  = WVPMatrixL * vec4(sout.skn_pos, 1.0);
}
///////////////////////////////////////////////////////////////
vertex_interface iface_skinned_stereo : iface_skinned {
  outputs {
    layout(secondary_view_offset=1) int gl_Layer;
  }
}
vertex_shader vs_sk_stereo
  : extension(GL_NV_stereo_view_rendering)
  : extension(GL_NV_viewport_array2)
  : iface_skinned_stereo
  : skin_tools {
  SkinOut sout = LitSkinned(boneindices, boneweights, position.xyz);
  frg_clr   = vec4(sout.skn_col, 1);
  frg_uv0   = uv0;
  gl_Position  = WVPMatrixL * vec4(sout.skn_pos, 1.0);
  gl_SecondaryPositionNV = WVPMatrixR * vec4(sout.skn_pos, 1);
  gl_Layer = 0;
  gl_ViewportMask[0] = 1;
  gl_SecondaryViewportMaskNV[0] = 2;
}
///////////////////////////////////////////////////////////////
fragment_shader ps_modtex : iface_fmt {
  vec4 texc = texture(DiffuseMap, frg_uv0 * vec2(1, -1));
  out_clr   = vec4(texc.xyz, 1) * modcolor * frg_clr;
  if (out_clr.a == 0.0f)
    discard;
}
///////////////////////////////////////////////////////////////
vertex_shader vs_vtxcolor : iface_rigid {
  vec4 cpos  = WVMatrix * position;
  vec3 wnorm = normalize(WRotMatrix * normal);

  gl_Position = WVPMatrix * position;
  frg_clr     = vtxcolor.bgra;
  frg_uv0     = uv0 * vec2(1.0f, -1.0f);
  frg_nrmd    = vec4(wnorm, -cpos.z);
}
///////////////////////////////////////////////////////////////
fragment_shader ps_fragclr : iface_fdefault { out_clr = frg_clr; }
fragment_shader ps_wnormalsk : iface_fdefault {
  out_clr = vec4(0, 1, 0, 1); // frg_clr;
}

///////////////////////////////////////////////////////////////
fragment_shader ps_fnormal 
  : iface_fdefault {
  vec3 X = dFdx(frg_pos);  
  vec3 Y = dFdy(frg_pos);
  vec3 normal=normalize(cross(X,Y)); 
  vec3 c = vec3(.5,.5,.5)+normal*0.5;
  out_clr = vec4(c,1);

}
///////////////////////////////////////////////////////////////
fragment_shader ps_fnormal_wire 
  : iface_fwire {
  vec3 X = dFdx(frg_pos);  
  vec3 Y = dFdy(frg_pos);
  vec3 normal=normalize(cross(X,Y)); 
  vec3 bary = frg_bary.xyz;
  float closest_edge = min(bary.x, min(bary.y, bary.z));
  vec3 c = vec3(.5,.5,.5)+normal*0.5;
  out_clr = vec4(1,1,1,1);//vec4(c*pow(closest_edge,0.05),1);
}
///////////////////////////////////////////////////////////////
fragment_shader ps_vtx_color 
  : iface_fwire {
  out_clr = vec4(frg_clr.xyz,1);
}
///////////////////////////////////////////////////////////////
fragment_shader ps_vnormal_wire 
  : iface_fwire {
  vec3 normal = normalize(frg_nrmd.xyz);
  vec3 bary = frg_bary.xyz;
  float closest_edge = min(bary.x, min(bary.y, bary.z));
  vec3 c = vec3(.5,.5,.5)+normal*0.5;
  out_clr = vec4(c*pow(closest_edge,0.05),1);
}
///////////////////////////////////////////////////////////////
fragment_shader ps_vuv_wire 
  : iface_fwire {
  vec3 bary = frg_bary.xyz;
  float closest_edge = min(bary.x, min(bary.y, bary.z));
  vec3 c = vec3(frg_uv0.xy,0);
  out_clr = vec4(c*pow(closest_edge,0.05),1);
}
///////////////////////////////////////////////////////////////
fragment_shader ps_modclr : iface_fmt { out_clr = modcolor; }
///////////////////////////////////////////////////////////////
fragment_shader ps_pick : iface_fpick {
  out_clr  = modcolor;
  out_nrmd = frg_nrmd;
}
///////////////////////////////////////////////////////////////
technique tek_lamberttex {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_vtxcolor;
    fragment_shader = ps_modtex;
    state_block     = sb_lerpblend;
  }
}
technique tek_modcolor {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_vtxcolor;
    fragment_shader = ps_modclr;
    state_block     = sb_default;
  }
}
technique tek_pick {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_vtxcolor;
    fragment_shader = ps_pick;
    state_block     = sb_default;
  }
}
technique tek_wnormal {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_wnormal;
    fragment_shader = ps_fragclr;
    state_block     = sb_default;
  }
}
technique tek_fnormal {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_wnormal;
    fragment_shader = ps_fnormal;
    state_block     = sb_default;
  }
}
technique tek_fnormal_wire {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_wnormal_wire;
    fragment_shader = ps_fnormal_wire;
    state_block     = sb_default;
  }
}
technique tek_vtxcolor {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_vtx_color;
    fragment_shader = ps_vtx_color;
    state_block     = sb_default;
  }
}
technique tek_vnormal_wire {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_wnormal_wire;
    fragment_shader = ps_vnormal_wire;
    state_block     = sb_default;
  }
}
technique tek_vuv_wire {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_wnormal_wire;
    fragment_shader = ps_vuv_wire;
    state_block     = sb_default;
  }
}
technique tek_wnormal_stereo {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_wnormal_stereo;
    fragment_shader = ps_fragclr;
    state_block     = sb_default;
  }
}
technique tek_wnormal_skinned {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_wnormalsk;
    fragment_shader = ps_fragclr;
    state_block     = sb_default;
  }
}
technique tek_lamberttex_skinned {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_sk;
    fragment_shader = ps_modtex;
    state_block     = sb_default;
  }
}
technique tek_lamberttex_skinned_stereo {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_sk_stereo;
    fragment_shader = ps_modtex;
    state_block     = sb_default;
  }
}
///////////////////////////////////////////////////////////////
