import "mathtools.i";
import "misctools.i";
import "envtools.i";
import "picktools.i";
import "pbrtools.i";
///////////////////////////////////////////////////////////////
// FxConfigs
///////////////////////////////////////////////////////////////
fxconfig fxcfg_default {
  glsl_version = "130";
}
///////////////////////////////////////////////////////////////
uniform_set ub_fwd_grid_vtx {
  mat4 mvp;
  mat4 mvp_l;
  mat4 mvp_r;
}
vertex_interface iface_vtx_fwd_grid_unlit : ub_fwd_grid_vtx {
  inputs {
    vec4 position : POSITION;
    vec2 uv0 : TEXCOORD0;
  }
  outputs {
    vec4 frg_clr;
    vec3 frg_pos;
    vec2 frg_uv0;
  }
}
vertex_interface iface_vtx_fwd_grid_lit : ub_fwd_grid_vtx {
  inputs {
    vec4 position : POSITION;
    vec3 normal : NORMAL;
    vec3 binormal : BINORMAL;
    // vec4 vtxcolor : COLOR0;
    vec2 uv0 : TEXCOORD0;
  }
  outputs {
    vec4 frg_wpos;
    vec4 frg_clr;
    vec2 frg_uv0;
    mat3 frg_tbn;
    float frg_camdist;
    vec3 frg_camz;
  }
}  
vertex_interface iface_vtx_fwd_grid_lit_stereo : iface_vtx_fwd_grid_lit {
  outputs {
    layout(secondary_view_offset = 1) int gl_Layer;
  }
}
///////////////////////////////////////////////////////////////
vertex_shader vs_grid_forward_unlit : iface_vtx_fwd_grid_unlit {
  gl_Position = mvp * position;
  frg_uv0     = uv0;
  frg_pos     = position.xyz;
}
vertex_shader vs_grid_forward_lit : iface_vtx_fwd_grid_lit {
  gl_Position = mvp * position;
  frg_uv0     = uv0;
  frg_wpos    = position;
  frg_camdist = 0.0;
  frg_camz    = vec3(0, 0, 0);
  frg_clr     = vec4(1, 1, 1, 1);
  frg_tbn     = mat3( // mat3 that rotates z to y
      1.0,
      0.0,
      0.0, // First column
      0.0,
      0.0,
      -1.0, // Second column
      0.0,
      1.0,
      0.0 // Third column
  );
}
vertex_shader vs_grid_forward_lit_stereo : extension(GL_NV_stereo_view_rendering) //
    : extension(GL_NV_viewport_array2)                                            //
    : iface_vtx_fwd_grid_lit_stereo {
  gl_Position                   = mvp_l * position;
  gl_SecondaryPositionNV        = mvp_r * position;
  frg_uv0                       = uv0;
  frg_wpos                      = position;
  frg_camdist                   = 0.0;
  frg_camz                      = vec3(0, 0, 0);
  frg_clr                       = vec4(1, 1, 1, 1);
  frg_tbn                       = mat3( // mat3 that rotates z to y
      1.0,
      0.0,
      0.0, // First column
      0.0,
      0.0,
      -1.0, // Second column
      0.0,
      1.0,
      0.0 // Third column
  );
  gl_Layer                      = 0;
  gl_ViewportMask[0]            = 1;
  gl_SecondaryViewportMaskNV[0] = 2;
}
///////////////////////////////////////////////////////////////
libblock lib_frg_grid : lib_gbuf_encode {
  float filteredGrid(vec2 p, vec2 dpdx, vec2 dpdy, float width) {
    //if (abs(p.x) < width || abs(p.y) < width)
      //return 1.0;

    vec2 pp = p + vec2(width, width) * 0.5;

    float N = 1.0 / width;
    vec2 w  = max(abs(dpdx), abs(dpdy));
    vec2 a  = pp + 0.5 * w;
    vec2 b  = pp - 0.5 * w;
    vec2 i  = (floor(a) + min(fract(a) * N, 1.0) - floor(b) - min(fract(b) * N, 1.0)) / (N * w);
    return (1.0 - i.x) * (1.0 - i.y);
  }

  vec4 grid_output(vec3 pos) {
    vec2 paramMajor = frg_uv0 + vec2(100.0, 100.0);
    vec2 dpdxMajor  = dFdx(paramMajor) * 2;
    vec2 dpdyMajor  = dFdy(paramMajor) * 2;

    vec2 paramMinor = paramMajor * 10.0;
    vec2 dpdxMinor  = dFdx(paramMinor);
    vec2 dpdyMinor  = dFdy(paramMinor);

    float gMajor = filteredGrid(paramMajor, dpdxMajor, dpdyMajor, 0.02);
    float gMinor = filteredGrid(paramMinor, dpdxMinor, dpdyMinor, 0.02);

    vec3 basecolor  = vec3(.48, .62, .90) * 0.95;
    vec3 majorcolor = basecolor * 1.1;
    vec3 minorcolor = basecolor * 1.05;

    vec3 color = mix(minorcolor, basecolor, gMinor);
    vec4 oc    = vec4(mix(majorcolor, color, gMajor), 1.0 - gMajor);

    return vec4(oc.xyz, 1);
  }

  vec4 grid_output2(vec3 pos) {
    vec2 paramMajor = frg_uv0 + vec2(100.0, 100.0);
    vec2 dpdxMajor  = dFdx(paramMajor) * 2;
    vec2 dpdyMajor  = dFdy(paramMajor) * 2;

    vec2 paramMinor = paramMajor * 10.0;
    vec2 dpdxMinor  = dFdx(paramMinor);
    vec2 dpdyMinor  = dFdy(paramMinor);

    float width  = 0.05;
    float gMajor = filteredGrid(paramMajor, dpdxMajor, dpdyMajor, width);
    float gMinor = filteredGrid(paramMinor, dpdxMinor, dpdyMinor, width);

    // Default base color setup (might be overridden based on axis logic)
    vec3 basecolor  = ModColor.xyz;
    vec3 majorcolor = basecolor * 1.1;
    vec3 minorcolor = basecolor * 1.05;

    bool on_zaxis = abs(pos.z) < width;
    bool on_xaxis = abs(pos.x) < width;

    // Determine color based on axis conditions
    if (pos.x > 0.0 && on_zaxis) {
      float mag = length(basecolor);
      basecolor = vec3(mag, 0.0, 0.0); // Red for +x axis
    } else if (pos.x < 0.0 && on_zaxis) {
      // basecolor = vec3(0.0, 0.0, 0.0); // Black for -x axis
    } else if (pos.z > 0.0 && on_xaxis) {
      float mag = length(basecolor);
      basecolor = vec3(0.0, 0.0, mag); // Blue for +z axis
    } else if (pos.z < 0.0 && on_xaxis) {
      // basecolor = vec3(0.0, 0.0, 0.0); // Black for -z axis
    }

    // vec3 color = mix(minorcolor, basecolor, gMinor);
    // vec4 oc = vec4(mix(majorcolor, color, gMajor), 1.0 - gMajor);

    float G = (1.0 - max(gMajor, gMinor));

    // oc = vec4(G,G,G,1);
    vec4 oc = vec4(basecolor * G, 1);
    return vec4(oc.xyz, 1);
  }

  vec4 grid_output3(vec3 pos) {

    float intensA = AuxA.x;
    float intensB = AuxA.y;
    float intensC = AuxA.z;
    float intensD = AuxA.w;
    float width   = AuxB.x;

    vec2 paramMajor = frg_uv0 + vec2(100.0, 100.0);
    vec2 dpdxMajor  = dFdx(paramMajor) * 2;
    vec2 dpdyMajor  = dFdy(paramMajor) * 2;

    vec2 paramMinor = paramMajor * 10.0;
    vec2 dpdxMinor  = dFdx(paramMinor);
    vec2 dpdyMinor  = dFdy(paramMinor);

    float gMajor = filteredGrid(paramMajor, dpdxMajor, dpdyMajor, width);
    float gMinor = filteredGrid(paramMinor, dpdxMinor, dpdyMinor, width);

    // Default base color setup (might be overridden based on axis logic)
    vec3 basecolor = ModColor.xyz;
    // vec3 majorcolor = basecolor * 1.1;
    // vec3 minorcolor = basecolor * 1.05;

    float dXdx = dFdx(pos.x);
    float dXdy = dFdy(pos.x);
    float dZdx = dFdx(pos.z);
    float dZdy = dFdy(pos.z);
    float edgeWidthX = length(vec2(dXdx, dXdy));
    float edgeWidthZ = length(vec2(dZdx, dZdy));
    float adjustedWidthX = width + 0.5 * edgeWidthX;
    float adjustedWidthZ = width + 0.5 * edgeWidthZ;

    float clamo_x = clamp(abs(pos.x) / adjustedWidthX, 0.0, 1.0);
    float clamo_z = clamp(abs(pos.z) / adjustedWidthZ, 0.0, 1.0);

    float map_x = 1.0 - smoothstep(0.5, 1.0, clamo_x);
    float map_z = 1.0 - smoothstep(0.5, 1.0, clamo_z);

    vec3 tgt_x = mix(vec3(.5,0,0),vec3(1.5,0,0),float(pos.x>0.0));
    vec3 tgt_z = mix(vec3(0,0,.5),vec3(0,0,1.5),float(pos.z>0.0));

    vec3 lerp_x = mix(vec3(1),tgt_x,map_z);
    vec3 lerp_z = mix(vec3(1),tgt_z,map_x);

    basecolor *= lerp_x;
    basecolor *= lerp_z;

    float G = (1.0 - max(gMajor, gMinor));

    return vec4(basecolor, G);
  }

  vec4 grid_output4(vec3 pos) {

    float intensA = AuxA.x;
    float intensB = AuxA.y;
    float intensC = AuxA.z;
    float intensD = AuxA.w;
    float width   = AuxB.x;

    vec2 paramMajor = frg_uv0;

    vec2 dpdxMajor = dFdx(paramMajor) * 2;
    vec2 dpdyMajor = dFdy(paramMajor) * 2;

    vec2 paramMinor = paramMajor * 10.0;
    vec2 dpdxMinor  = dFdx(paramMinor);
    vec2 dpdyMinor  = dFdy(paramMinor);

    float gMajor = filteredGrid(paramMajor, dpdxMajor, dpdyMajor, width);
    float gMinor = filteredGrid(paramMinor, dpdxMinor, dpdyMinor, width);

    // Default base color setup (might be overridden based on axis logic)
    vec3 basecolor = ModColor.xyz;

    basecolor = mix(basecolor*intensC,basecolor,gMajor);
    basecolor = mix(basecolor*intensD,basecolor,gMinor);

    int ix = int(abs(floor(pos.x)));
    int iz = int(abs(floor(pos.z)));

    if ((ix & 1) == (iz & 1)){
      basecolor *= intensA;
    }
    else{
      basecolor *= intensB;
    }

    float dXdx = dFdx(pos.x);
    float dXdy = dFdy(pos.x);
    float dZdx = dFdx(pos.z);
    float dZdy = dFdy(pos.z);
    float edgeWidthX = length(vec2(dXdx, dXdy));
    float edgeWidthZ = length(vec2(dZdx, dZdy));
    float adjustedWidthX = width + 0.5 * edgeWidthX;
    float adjustedWidthZ = width + 0.5 * edgeWidthZ;

    float clamo_x = clamp(abs(pos.x) / adjustedWidthX, 0.0, 1.0);
    float clamo_z = clamp(abs(pos.z) / adjustedWidthZ, 0.0, 1.0);

    float map_x = 1.0 - smoothstep(0.5, 1.0, clamo_x);
    float map_z = 1.0 - smoothstep(0.5, 1.0, clamo_z);

    vec3 tgt_x = mix(vec3(.5,0,0),vec3(1.5,0,0),float(pos.x>0.0));
    vec3 tgt_z = mix(vec3(0,0,.5),vec3(0,0,1.5),float(pos.z>0.0));

    vec3 lerp_x = mix(vec3(1),tgt_x,map_z);
    vec3 lerp_z = mix(vec3(1),tgt_z,map_x);

    basecolor *= lerp_x;
    basecolor *= lerp_z;

    // Rest of your shader logic
    return vec4(basecolor, map_x*map_z);
  }

  vec4 grid_output5(vec3 pos) {

    float intensA = AuxA.x;
    float intensB = AuxA.y;
    float intensC = AuxA.z;
    float intensD = AuxA.w;
    float width   = AuxB.x;

    vec2 paramMajor = frg_uv0;

    vec2 dpdxMajor = dFdx(paramMajor) * 2;
    vec2 dpdyMajor = dFdy(paramMajor) * 2;

    vec2 paramMinor = paramMajor * 10.0;
    vec2 dpdxMinor  = dFdx(paramMinor);
    vec2 dpdyMinor  = dFdy(paramMinor);

    float gMajor = filteredGrid(paramMajor, dpdxMajor, dpdyMajor, width);
    float gMinor = filteredGrid(paramMinor, dpdxMinor, dpdyMinor, width);

    // Default base color setup (might be overridden based on axis logic)
    vec3 basecolor = ModColor.xyz;

    basecolor = mix(basecolor*intensC,basecolor,gMajor);
    basecolor = mix(basecolor*intensD,basecolor,gMinor);

    int ix = int(abs(floor(pos.x)));
    int iz = int(abs(floor(pos.z)));

    if ((ix & 1) == (iz & 1)){
      basecolor *= intensA;
    }
    else{
      basecolor *= intensB;
    }

    float dXdx = dFdx(pos.x);
    float dXdy = dFdy(pos.x);
    float dZdx = dFdx(pos.z);
    float dZdy = dFdy(pos.z);
    float edgeWidthX = length(vec2(dXdx, dXdy));
    float edgeWidthZ = length(vec2(dZdx, dZdy));
    float adjustedWidthX = width + 0.5 * edgeWidthX;
    float adjustedWidthZ = width + 0.5 * edgeWidthZ;

    float clamo_x = clamp(abs(pos.x) / adjustedWidthX, 0.0, 1.0);
    float clamo_z = clamp(abs(pos.z) / adjustedWidthZ, 0.0, 1.0);

    float map_x = 1.0 - smoothstep(0.5, 1.0, clamo_x);
    float map_z = 1.0 - smoothstep(0.5, 1.0, clamo_z);

    vec3 tgt_x = mix(vec3(.5,0,0),vec3(1.5,0,0),float(pos.x>0.0));
    vec3 tgt_z = mix(vec3(0,0,.5),vec3(0,0,1.5),float(pos.z>0.0));

    vec3 lerp_x = mix(vec3(1),tgt_x,map_z);
    vec3 lerp_z = mix(vec3(1),tgt_z,map_x);

    basecolor *= lerp_x;
    basecolor *= lerp_z;

    // Rest of your shader logic
    return vec4(basecolor, map_x*map_z);
  }

}

///////////////////////////////////////////////////////////////
fragment_interface iface_fgrid_gbuffer : ub_frg {
  inputs {
    vec3 frg_pos;
    vec4 frg_clr;
    vec2 frg_uv0;
  }
  outputs {
    layout(location = 0) uvec4 out_gbuf;
  }
}
///////////////////////////////////////////////////////////////
fragment_interface iface_grid_forward_unlit {
  inputs {
    vec2 frg_uv0;
    vec3 frg_pos;
  }
  outputs {
    layout(location = 0) vec4 out_clr;
  }
}
fragment_interface iface_grid_forward_lit {
  inputs {
    vec2 frg_uv0;
    vec4 frg_wpos;
    mat3 frg_tbn;
    vec4 frg_clr;
    float frg_camdist;
    vec3 frg_camz;
  }
  outputs {
    layout(location = 0) vec4 out_clr;
  }
}
///////////////////////////////////////////////////////////////
fragment_shader ps_grid_forward_unlit_mono : iface_grid_forward_unlit : lib_frg_grid : ub_frg_fwd : ub_frg_fwd_lighting {
  vec4 gout = grid_output(frg_pos.xyz);
  out_clr   = gout;
}
fragment_shader ps_grid_forward_unlit_mono_v2 : iface_grid_forward_unlit : lib_frg_grid : ub_frg_fwd : ub_frg_fwd_lighting {
  vec4 gout = grid_output2(frg_pos.xyz);
  out_clr   = gout;
}
fragment_shader ps_grid_forward_unlit_mono_v3 : iface_grid_forward_unlit : lib_frg_grid : ub_frg_fwd : ub_frg_fwd_lighting {
  vec4 gout = grid_output3(frg_pos.xyz);
  out_clr   = gout;
}
fragment_shader ps_grid_forward_unlit_mono_v4 : iface_grid_forward_unlit : lib_frg_grid : ub_frg_fwd : ub_frg_fwd_lighting {
  vec4 gout = grid_output4(frg_pos.xyz);
  out_clr   = gout;
}
fragment_shader ps_grid_forward_unlit_mono_v5 : iface_grid_forward_unlit : lib_frg_grid : ub_frg_fwd : ub_frg_fwd_lighting {
  vec4 gout = grid_output5(frg_pos.xyz);
  out_clr   = gout;
}
fragment_shader ps_grid_forward_unlit_v3
  : iface_grid_forward_unlit
  : lib_frg_grid {
  vec4 gout = grid_output2(frg_pos.xyz);
  out_clr = gout;
}
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
vertex_interface iface_vtx_fwd_grid_depth : ub_fwd_grid_vtx {
  inputs {
    vec4 position : POSITION;
  }
  outputs {
    float frg_camz;
  }
}
fragment_interface iface_frg_grid_forward_depth {
  inputs {
    float frg_camz;
  }
  outputs {
    layout(location = 0) float out_z;
  }
}
vertex_shader vs_grid_forward_depth_prepass : iface_vtx_fwd_grid_depth {
  vec4 HPOS = mvp * position;
  gl_Position = HPOS;
  frg_camz     = HPOS.z/HPOS.w;
}
fragment_shader ps_grid_forward_depth_prepass : iface_frg_grid_forward_depth {
  out_z   = frg_camz;
}
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
fragment_shader ps_grid_forward_lit_mono : iface_grid_forward_lit : lib_frg_grid : lib_fwd : ub_frg_fwd : ub_frg_fwd_lighting {
  vec4 gout = grid_output(frg_wpos.xyz);
  vec3 oc   = forward_lighting_mono(gout.xyz);
  out_clr   = vec4(oc.xyz, 1);
}
///////////////////////////////////////////////////////////////
fragment_shader ps_grid_forward_lit_mono_v2 : iface_grid_forward_lit : lib_frg_grid : lib_fwd : ub_frg_fwd : ub_frg_fwd_lighting {
  vec4 gout = grid_output2(frg_wpos.xyz);
  vec3 oc   = forward_lighting_mono(gout.xyz);
  out_clr   = vec4(oc.xyz, 1);
}
///////////////////////////////////////////////////////////////
fragment_shader ps_grid_forward_lit_mono_v3 : iface_grid_forward_lit : lib_frg_grid : lib_fwd : ub_frg_fwd : ub_frg_fwd_lighting {
  vec4 gout = grid_output3(frg_wpos.xyz);
  vec3 oc   = forward_lighting_mono(gout.xyz);
  out_clr   = vec4(oc.xyz, gout.w);
}
///////////////////////////////////////////////////////////////
fragment_shader ps_grid_forward_lit_mono_v4 : iface_grid_forward_lit : lib_frg_grid : lib_fwd : ub_frg_fwd : ub_frg_fwd_lighting {
  vec4 gout = grid_output4(frg_wpos.xyz);
  vec3 oc   = forward_lighting_mono(gout.xyz);
  out_clr   = vec4(oc.xyz, gout.w);
}
///////////////////////////////////////////////////////////////
fragment_shader ps_grid_forward_lit_mono_v5 : iface_grid_forward_lit : lib_frg_grid : lib_fwd : ub_frg_fwd : ub_frg_fwd_lighting {
  vec3 oc   = forward_lighting_mono(vec3(1,1,1))*ModColor.xyz;
  out_clr   = vec4(oc, 1.0);
}
///////////////////////////////////////////////////////////////
fragment_shader ps_grid_forward_lit_stereo : iface_grid_forward_lit : lib_frg_grid : lib_fwd_stereo : ub_frg_fwd
    : ub_frg_fwd_lighting {
  vec4 gout = grid_output(frg_wpos.xyz);
  vec3 oc   = forward_lighting_stereo(gout.xyz);
  out_clr   = vec4(gout.xyz, 1);
}
///////////////////////////////////////////////////////////////
fragment_shader ps_grid_forward_lit_stereo_v2 : iface_grid_forward_lit : lib_frg_grid : lib_fwd_stereo : ub_frg_fwd
    : ub_frg_fwd_lighting {
  vec4 gout = grid_output2(frg_wpos.xyz);
  vec3 oc   = forward_lighting_stereo(gout.xyz);
  out_clr   = vec4(gout.xyz, 1);
}
///////////////////////////////////////////////////////////////
fragment_shader ps_grid_forward_lit_stereo_v3 : iface_grid_forward_lit : lib_frg_grid : lib_fwd_stereo : ub_frg_fwd
    : ub_frg_fwd_lighting {
  vec4 gout = grid_output3(frg_wpos.xyz);
  vec3 oc   = forward_lighting_stereo(gout.xyz);
  out_clr   = vec4(gout.xyz, gout.w);
}
///////////////////////////////////////////////////////////////
fragment_shader ps_grid_forward_lit_stereo_v4 : iface_grid_forward_lit : lib_frg_grid : lib_fwd_stereo : ub_frg_fwd
    : ub_frg_fwd_lighting : extension(GL_NV_viewport_array) { //
  vec4 gout = grid_output4(frg_wpos.xyz);
  vec3 oc   = forward_lighting_stereo(gout.xyz);
  out_clr   = vec4(oc, gout.w);
}
///////////////////////////////////////////////////////////////
vertex_shader vs_rigid_gbuffer_grid : iface_vtx_fwd_grid_unlit {
  frg_uv0     = uv0;
  frg_pos     = position.xyz;
  frg_clr     = vec4(1, 1, 1, 1);
  gl_Position = mvp * position;
}
libblock lib_frgdeferred_grid_pbr : lib_frg_grid {
  void pscommon() {
    vec3 normal     = vec3(0, 1, 0);
    float mtl       = 0.0;
    float ruf       = 1.0;
    vec3 grid_color = grid_output2(frg_pos.xyz).xyz;
    out_gbuf        = packGbuffer(
        vec3(0.1),  // basecolor
        grid_color, // emmisive
        normal,     // normal
        ruf,
        mtl);
  }
}
fragment_shader ps_gbuffer_nx : iface_fgrid_gbuffer : lib_frgdeferred_grid_pbr {
  pscommon();
}
fragment_shader ps_gbuffer_nx_stereo : iface_fgrid_gbuffer : lib_frgdeferred_grid_pbr {
  pscommon();
}
///////////////////////////////////////////////////////////////
technique GBU_CT_NM_RI_NI_MO {
  fxconfig = fxcfg_default;
  vf_pass  = { vs_rigid_gbuffer_grid, ps_gbuffer_nx, sb_default }
}
technique GBU_CT_NM_RI_NI_ST {
  fxconfig = fxcfg_default;
  vf_pass  = { vs_rigid_gbuffer_stereo, ps_gbuffer_nx_stereo, sb_default }
}

///////////////////////////////////////////////////////////////
state_block sb_forward : default {
  // BlendMode = ALPHA;
  // DepthTest = LEQUALS;
  // DepthMask = true;
  // CullTest  = OFF;
}
state_block sb_forward_blend : default {
  BlendMode = ADDITIVE;
}
technique FWD_UNLIT_NI_MO {
  fxconfig = fxcfg_default;
  vf_pass  = { vs_grid_forward_unlit, ps_grid_forward_unlit_mono, sb_forward }
}
technique FWD_UNLIT_NI_MO_V2 {
  fxconfig = fxcfg_default;
  vf_pass  = { vs_grid_forward_unlit, ps_grid_forward_unlit_mono_v2, sb_forward }
}
technique FWD_UNLIT_NI_MO_V3 {
  fxconfig = fxcfg_default;
  vf_pass  = { vs_grid_forward_unlit, ps_grid_forward_unlit_mono_v3, sb_forward }
}
technique FWD_UNLIT_NI_MO_V4 {
  fxconfig = fxcfg_default;
  vf_pass  = { vs_grid_forward_unlit, ps_grid_forward_unlit_mono_v4, sb_forward }
}
technique FWD_UNLIT_NI_MO_V5 {
  fxconfig = fxcfg_default;
  vf_pass  = { vs_grid_forward_unlit, ps_grid_forward_unlit_mono_v5, sb_forward }
}
technique FWD_DEPTHPREPASS_RI_NI_MO {
  fxconfig = fxcfg_default;
  vf_pass  = { vs_grid_forward_depth_prepass, ps_grid_forward_depth_prepass, sb_forward }
}
technique FWD_DEPTHPREPASS_RI_NI_MO_V2 {
  fxconfig = fxcfg_default;
  vf_pass  = { vs_grid_forward_depth_prepass, ps_grid_forward_depth_prepass, sb_forward }
}
technique FWD_DEPTHPREPASS_RI_NI_MO_V3 {
  fxconfig = fxcfg_default;
  vf_pass  = { vs_grid_forward_depth_prepass, ps_grid_forward_depth_prepass, sb_forward }
}
technique FWD_DEPTHPREPASS_RI_NI_MO_V4 {
  fxconfig = fxcfg_default;
  vf_pass  = { vs_grid_forward_depth_prepass, ps_grid_forward_depth_prepass, sb_forward }
}
technique FWD_DEPTHPREPASS_RI_NI_MO_V5 {
  fxconfig = fxcfg_default;
  vf_pass  = { vs_grid_forward_depth_prepass, ps_grid_forward_depth_prepass, sb_forward }
}
technique FWD_CT_NM_RI_NI_MO {
  fxconfig = fxcfg_default;
  vf_pass  = { vs_grid_forward_lit, ps_grid_forward_lit_mono, sb_forward }
}
technique FWD_CT_NM_RI_NI_MO_V2 {
  fxconfig = fxcfg_default;
  vf_pass  = { vs_grid_forward_lit, ps_grid_forward_lit_mono_v2, sb_forward }
}
technique FWD_CT_NM_RI_NI_MO_V3 {
  fxconfig = fxcfg_default;
  vf_pass  = { vs_grid_forward_lit, ps_grid_forward_lit_mono_v3, sb_forward_blend }
}
technique FWD_CT_NM_RI_NI_MO_V4 {
  fxconfig = fxcfg_default;
  vf_pass  = { vs_grid_forward_lit, ps_grid_forward_lit_mono_v4, sb_forward_blend }
}
technique FWD_CT_NM_RI_NI_MO_V5 {
  fxconfig = fxcfg_default;
  vf_pass  = { vs_grid_forward_lit, ps_grid_forward_lit_mono_v5, sb_forward_blend }
}
technique FWD_CT_NM_RI_NI_ST_V4 {
  fxconfig = fxcfg_default;
  vf_pass  = { vs_grid_forward_lit_stereo, ps_grid_forward_lit_stereo_v4, sb_forward_blend }
}
technique FWD_CT_NM_RI_NI_ST {
  fxconfig = fxcfg_default;
  vf_pass  = { vs_grid_forward_lit_stereo, ps_grid_forward_lit_stereo, sb_forward }
}

technique FWD_CT_NM_RI_NI_ST_V2 {
  fxconfig = fxcfg_default;
  vf_pass  = { vs_grid_forward_lit_stereo, ps_grid_forward_lit_stereo_v2, sb_forward_blend }
}
technique FWD_CT_NM_RI_NI_ST_V3 {
  fxconfig = fxcfg_default;
  vf_pass  = { vs_grid_forward_lit_stereo, ps_grid_forward_lit_stereo_v3, sb_forward_blend }
}
