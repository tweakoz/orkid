///////////////////////////////////////////////////////////////
// FxConfigs
///////////////////////////////////////////////////////////////
fxconfig fxcfg_default {
import "orkshader://mathtools.i";
import "orkshader://pbrtools.i";
}
///////////////////////////////////////////////////////////////

uniform_set ub_frgX {
  float Time;
}

///////////////////////////////////////////////////////////////
vertex_interface vif_my_depthprepass : ub_vtx {
  inputs {
    vec4 position : POSITION;
  }
  outputs {
    float frg_depth;
  }
}
///////////////////////////////////////////////////////////////
vertex_interface vif_terrain : ub_vtx {
  inputs {
    vec4 position : POSITION;
    vec3 normal : NORMAL;
    vec3 binormal : BINORMAL;
    vec4 vtxcolor : COLOR0;
    vec2 uv0 : TEXCOORD0;
  }
  outputs {
    vec4 frg_wpos;
    vec3 frg_mesh_bary;
    vec3 frg_displacement;
  }
}
///////////////////////////////////////////////////////////////
fragment_interface fif_terrain : ub_frg_fwd_lighting {
  inputs {
    vec4 frg_wpos;
    vec3 frg_mesh_bary;
    vec3 frg_displacement;
  }
  outputs {
    layout(location = 0) vec4 out_color;
  }
}
///////////////////////////////////////////////////////////////
libblock lib_ground_vtx_base : ub_frgX {
  struct TerrainData {
    vec4 true_wpos;
    vec4 new_pos;
    vec3 signal;
    float radius;
  };

  TerrainData vs_compute_position(vec3 pos) {
    TerrainData TD;
    mat4 matO2W   = inverse(v) * m;
    vec4 wave_pos = matO2W * vec4(pos, 1);
    float radius  = length(wave_pos.xz);

    TD.signal    = vec3(0);
    TD.true_wpos = wave_pos;
    TD.new_pos   = vec4(pos, 1);
    TD.radius    = radius;
    return TD;
  }
}

///////////////////////////////////////////////////////////////
vertex_shader vs_ground_mono //
    : vif_terrain            //
    : lib_ground_vtx_base {  //
  vec4 cpos = v * position;

  TerrainData TD = vs_compute_position(position.xyz);

  frg_wpos         = TD.new_pos;
  frg_mesh_bary    = normal;
  frg_displacement = vec3(0);

  vec3 wnormal    = normalize(mrot * normal);
  vec3 wbitangent = normalize(mrot * binormal); // technically binormal is a bitangent
  vec3 wtangent   = cross(wbitangent, wnormal);

  gl_Position = mvp * TD.new_pos;
}
///////////////////////////////////////////////////////////////
vertex_shader vs_my_forward_depthprepass_mono //
    : vif_my_depthprepass                     //
    : lib_ground_vtx_base {                   //
  TerrainData TD = vs_compute_position(position);
  vec4 new_pos   = TD.new_pos;
  vec4 hpos      = mvp * new_pos;
  gl_Position    = hpos;
  frg_depth      = (hpos.z) / (hpos.w - 0.05);
}
///////////////////////////////////////////////////////////////
vertex_shader vs_ground_stereo               //
    : iface_vgbuffer_stereo                  //
    : lib_ground_vtx_base                    //
    : extension(GL_NV_stereo_view_rendering) //
    : extension(GL_NV_viewport_array2) {     //
  gl_Position                   = mvp_l * position;
  gl_SecondaryPositionNV        = mvp_r * position;
  gl_Layer                      = 0;
  gl_ViewportMask[0]            = 1;
  gl_SecondaryViewportMaskNV[0] = 2;
}
///////////////////////////////////////////////////////////////
fragment_shader ps_fwd_ground_mono : fif_terrain : ub_frgX {
  vec3 bary = frg_mesh_bary;
  out_color = vec4(bary, 1);
}
///////////////////////////////////////////////////////////////
fragment_shader ps_fwd_ground_stereo : fif_terrain : ub_frgX {
  out_color = frg_wpos;
}
///////////////////////////////////////////////////////////////
technique FWD_DEPTHPREPASS_RI_NI_MO {
  fxconfig = fxcfg_default;
  vf_pass  = { vs_my_forward_depthprepass_mono, ps_forward_depthprepass_mono, sb_default }
}
///////////////////////////////////////////////////////////////
technique FWD_CT_NM_RI_NI_MO {
  fxconfig = fxcfg_default;
  vf_pass  = { vs_ground_mono, ps_fwd_ground_mono, sb_default }
}
///////////////////////////////////////////////////////////////
technique FWD_CT_NM_RI_NI_ST {
  fxconfig = fxcfg_default;
  vf_pass  = { vs_ground_stereo, ps_fwd_ground_stereo, sb_default }
}