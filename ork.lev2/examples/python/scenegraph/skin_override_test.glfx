///////////////////////////////////////////////////////////////
// FxConfigs
///////////////////////////////////////////////////////////////
fxconfig fxcfg_default {
  import "orkshader://mathtools.i";
  import "orkshader://pbrtools.i";
  import "orkshader://envtools.i";
  import "orkshader://misctools.i";
}
///////////////////////////////////////////////////////////////
vertex_interface VIF
  : iface_vgbuffer 
  : iface_skintools {
}
///////////////////////////////////////////////////////////////
vertex_shader VS : VIF : skin_tools : lib_pbr_vtx {
  vec4 skn_pos = vec4(SkinPosition(position.xyz), 1);
  vec3 skn_nrm = SkinNormal(normal);
  vec3 skn_bit = SkinNormal(binormal); // // technically binormal is a bitangent
  vs_common(skn_pos, skn_nrm, skn_bit);
  frg_clr = position; //m * skn_pos;
  gl_Position = mvp * skn_pos;
}
///////////////////////////////////////////////////////////////
fragment_shader FS 
  : iface_fgbuffer
  : lib_gbuf_encode
  : lib_pbr_frg
  : lib_cellnoise
  : ub_frg {
  vec3 TN        = texture(CNMREA, vec3(frg_uv0, 1)).xyz;
  TN            = mix(TN, vec3(0.5, 1, 0.5), 0.0);
  vec3 N        = normalize(TN * 2.0 - vec3(1, 1, 1));
  vec3 normal    = normalize(frg_tbn * N);
  vec3 rufmtlamb = texture(CNMREA, vec3(frg_uv0, 2)).xyz;
  float mtl      = rufmtlamb.z * MetallicFactor;
  float ruf      = rufmtlamb.y * RoughnessFactor;
  vec3 POS = frg_clr.xyz;
  float noise = cellnoise(POS*40.1);
  noise *= cellnoise(POS*37.7);
  noise *= cellnoise(POS*47.7);
  noise *= cellnoise(POS*54.7);
  noise = pow(noise, 0.02);
  vec3 color_tex = texture(CNMREA, vec3(frg_uv0,0)).xyz;
  vec3 color = (BaseColor.xyz * color_tex).xyz;// * noise;
  out_gbuf   = packGbuffer(color, vec3(0), normal, ruf, mtl);
  //out_gbuf   = packGbuffer(vec3(0), rufmtlamb, normal, ruf, mtl);
}
///////////////////////////////////////////////////////////////
technique GBU_CT_NM_SK_NI_MO {
  fxconfig=fxcfg_default;
  vf_pass={VS,FS,sb_default}
}
